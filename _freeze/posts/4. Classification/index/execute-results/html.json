{
  "hash": "adac1384df13fa4283f2bebe23cf8677",
  "result": {
    "markdown": "---\ntitle: \"4\\\\. Machine Learning in Classification\"\nauthor: \"Saim Ehtesham Ali\"\ndate: \"2023-11-22\"\ncategories: [Linear Regression, ML, ML Basics]\noutput: html_document\nimage: \"image.jpg\"\nformat:\n  html:\n    code-fold: true\ncode-fold: true\nkeep-ipynb: true\n---\n\n# **Machine Learning in Classification: ROC, PR, and Confusion Matrix**\n\nClassification is a core task in machine learning where the objective is to predict discrete categories or class labels. To evaluate the performance of classification models, several tools are used, including ROC curves, PR curves, and confusion matrices. This blog post delves into these evaluation metrics and demonstrates their use with examples.\n\n## **ROC (Receiver Operating Characteristic)**\n\n### **Understanding ROC**\n\nThe ROC curve is a graphical representation of a classification model's performance. It plots the True Positive Rate (TPR) against the False Positive Rate (FPR) at various threshold settings. The Area Under the Curve (AUC) of the ROC curve is a single value summary of the model performance.\n\n### **Example: ROC Curve Using Iris Dataset**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import necessary libraries\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\n\n# Load the Iris dataset\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\n# Binary classification problem: Classify Iris-setosa vs others\ny = (y == 0).astype(int) \n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a logistic regression model\nmodel = LogisticRegression(solver='lbfgs', max_iter=200)\nmodel.fit(X_train, y_train)\ny_scores = model.predict_proba(X_test)[:, 1]\n\n# Compute ROC curve and AUC\nfpr, tpr, thresholds = roc_curve(y_test, y_scores)\nroc_auc = auc(fpr, tpr)\n\n# Plotting ROC Curve\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=589 height=449}\n:::\n:::\n\n\nIn this example, we use the Iris dataset to perform binary classification (Iris-setosa vs others). We train a logistic regression model and plot the ROC curve, along with calculating the AUC to evaluate the model's performance.\n\n## **PR (Precision-Recall)**\n\n### **Understanding PR**\n\nThe Precision-Recall (PR) curve is another tool for evaluating classifiers, especially useful in imbalanced datasets. It plots precision (positive predictive value) against recall (true positive rate).\n\n### **Example: PR Curve Using Breast Cancer Dataset**\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Import libraries\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve\nimport matplotlib.pyplot as plt\n\n# Load the breast cancer dataset\ndata = load_breast_cancer()\nX = data.data\ny = data.target\n\n# Splitting the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Logistic Regression Model\nmodel = LogisticRegression(solver='liblinear')\nmodel.fit(X_train, y_train)\ny_scores = model.predict_proba(X_test)[:, 1]\n\n# Precision-Recall Curve\nprecision, recall, thresholds = precision_recall_curve(y_test, y_scores)\n\n# Plotting\nplt.plot(recall, precision, marker='.')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=589 height=449}\n:::\n:::\n\n\nThis example uses the Breast Cancer dataset to demonstrate the PR curve. A logistic regression model is trained, and the PR curve is plotted to assess the trade-off between precision and recall for different threshold values.\n\n## **Confusion Matrix**\n\n### **Understanding Confusion Matrix**\n\nA confusion matrix is a table used to evaluate the performance of a classification model. It shows the actual versus predicted classifications and breaks down the results into true positives, true negatives, false positives, and false negatives.\n\n### **Example: Confusion Matrix Using Wine Dataset**\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Import libraries\nfrom sklearn.datasets import load_wine\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load wine dataset\nwine = load_wine()\nX = wine.data\ny = wine.target\n\n# Splitting the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train a Random Forest Classifier\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# Generating the confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\n# Visualization\nsns.heatmap(cm, annot=True, fmt=\"d\")\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=560 height=449}\n:::\n:::\n\n\nIn this example, we use the Wine dataset to demonstrate the confusion matrix. After training a Random Forest Classifier, the confusion matrix is plotted using Seaborn, providing a clear visualization of the model's performance in terms of correct and incorrect classifications.\n\n## **Concluding Thoughts**\n\nThe tools and examples discussed in this blog post provide a comprehensive overview of evaluating classification models in machine learning. The ROC and PR curves offer insights into the model's performance from different perspectives, particularly useful in varied dataset conditions. The confusion matrix, on the other hand, provides a straightforward, quantifiable measure of a model's predictive capabilities and errors.\n\nWhen applied correctly, these tools can greatly assist in understanding the strengths and weaknesses of classification models, guiding data scientists in model selection, tuning, and improvement. As machine learning continues to evolve, the proper evaluation of models remains a cornerstone of developing robust, reliable, and efficient predictive systems.\n\nRemember, the journey in machine learning is as much about understanding and interpreting the models as it is about building them.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}